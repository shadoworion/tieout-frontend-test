import type { BaseTranslation } from "../i18n-types";

const en: BaseTranslation = {
  Login: {
    termsConditions: [
      "By signing in, you agree to our ",
      "Terms of Service",
      "and",
      "Privacy Policy",
      "of the company",
    ],
    SignIn: {
      title: "Sign in to your account",
      description: "Please fill in the details you registered with",
      email: "Email address",
      password: "Password",
      forgot: "Forgot password?",
      submit: "Sign in",
      noAccount: "Don't have an account?",
      signup: "Sign up now",
      errors: {
        notActive: "Account is not active",
        wrongPassword: "Wrong email or password",
        tooManyRequests: "Too many requests, please try again later",
        unknown: "Sign in error - please try again later",
      },
    },
    SignUp: {
      title: "Sign up for a new account",
      description: "Please fill in the details to create your account",
      fullname: "Full name",
      email: "Email address",
      phone: "Phone number",
      password: "Password",
      advertising: "I would like to receive marketing communications",
      submit: "Sign up",
      hasAccount: "Already have an account?",
      signin: "Sign in now",
      notifications: {
        success: "Account created successfully",
      },
      errors: {
        exists: "Account already exists",
        unknown: "Sign up error - please try again later",
      },
    },
  },
  User: {
    Navigation: {
      transactions: "Transactions",
      balances: "Balances",
      reports: "Reports",
    },
    Homepage: {
      buttons: {
        create: "Create new account",
        manual: "Manual account",
      },
      columns: {
        account: "Account name",
        type: "Account type",
        status: "Status",
        inventoryType: "Inventory type",
        trxCount: "Transactions count",
        firstTrx: "First transaction",
        lastTrx: "Last transaction",
        syncDate: "Last sync",
      },
      status: {
        empty: "Empty account",
        syncing: "Syncing",
        synced: "Synced",
        default: "No data",
      },
      context: {
        inventory: "Inventory options",
        createGroup: "Create group...",
        pin: "Pin account",
        unpin: "Unpin account",
      },
      messages: {
        pinned: "Account pinned successfully",
        unpinned: "Account unpinned successfully",
        inventory: "Inventory options changed successfully",
        master: "Request for master file upload sent successfully",
        delete: "Request for manual accounts deletion sent successfully",
      },
      confirm: {
        title: "Delete manual accounts",
        content: [
          "Are you sure you want to delete ",
          "one manual account",
          " manual accounts",
          "Attention! All actions, settings and files will be deleted without the possibility of recovery",
        ],
      },
    },
  },
  Welcome: {
    title: "Welcome",
    button: "Enter to Adminpanel",
  },
  Navigation: {
    rawTransactions: "Raw Transactions",
    erroredTransactions: "Errored Transactions",
    transactions: "Transactions",
    transfers: "Transfers",
    mapFile: "Map files",
    reports: "Reports",
    balances: "Balances",
    journal: "Journal Entries",
  },
  UserPanel: {
    hi: "Hi,",
    controlPanel: "Control Panel",
    orgSettings: "Organization Settings",
    userSettings: "User Settings",
    signout: "Sign out",
  },
  Homepage: {
    buttons: {
      create: "Create new account",
      upload: "Upload master file",
      delete: "Delete manual accounts",
    },
    columns: {
      account: "Account name",
      type: "Account type",
      status: "Status",
      inventoryType: "Inventory type",
      trxCount: "Transactions count",
      firstTrx: "First transaction",
      lastTrx: "Last transaction",
      syncDate: "Last sync",
    },
    status: {
      empty: "Empty account",
      syncing: "Syncing",
      synced: "Synced",
      default: "No data",
    },
    context: {
      inventory: "Inventory options",
      createGroup: "Create group...",
      pin: "Pin account",
      unpin: "Unpin account",
    },
    messages: {
      pinned: "Account pinned successfully",
      unpinned: "Account unpinned successfully",
      inventory: "Inventory options changed successfully",
      master: "Request for master file upload sent successfully",
      delete: "Request for manual accounts deletion sent successfully",
    },
    confirm: {
      title: "Delete manual accounts",
      content: [
        "Are you sure you want to delete ",
        "one manual account",
        " manual accounts",
        "Attention! All actions, settings and files will be deleted without the possibility of recovery",
      ],
    },
  },
  Sources: {
    buttons: {
      manualAccount: "Manual account",
      bloxtaxAccount: "Bloxtax account",
      walletsBatch: "Wallets batch",
    },
    cards: {
      exchange: "Exchange",
      wallet: "Wallet",
    },
    form: {
      subaccount: "Subaccount",
      key: {
        label: "API Key",
        placeholder: "Enter API Key",
      },
      secret: {
        label: "API Secret",
        placeholder: "Enter API Secret",
      },
      passphrase: {
        label: "API Passphrase",
        placeholder: "Enter API Passphrase",
      },
      address: "Wallet address",
      checkActiveWallets: "Check active wallets in every network",
      fromDate: "Activity start date",
      withFutures: "Including futures",
      ico: {
        amount: "Transfer amount",
        currency: "Transfer currency",
      },
      pool: {
        address: "Token address",
      },
      vault: {
        address: "Smart contract",
      },
      blackbox: {
        address: "Smart contract",
      },
    },
  },
  SourceTrx: {
    columns: {
      account: "Account",
      method: "Method",
      subAccount: "Sub-Account",
      date: "Date",
      buy: "Buy",
      sell: "Sell",
      fee: "Fee",
      amount: "Amount",
      currency: "Currency",
      token: "Token",
      idHash: "IdHash (TxHash)",
      bitqueryMethod: "Bitquery method",
      smartContract: "Smart contract",
      sender: "Sender",
      receiver: "Receiver",
      source: "Source",
      comments: "Comments",
      id: "BLX-ID",
    },
    context: {
      methods: "Methods",
      mapRemove: "Remove method",
      mapClear: "Clear transactions",
      scan: "Show in ",
      activateTrx: "Use transaction",
      deactivateTrx: "Skip transaction",
    },
    errors: {
      "default-in-error": "Missing buy and/or sell exist",
      "default-out-error": "Missing sell and/or buy exist",
      "in-error": "Missing buy",
      "out-error": "Missing sell",
      "default-double-error": "Missing buy or sell",
      "raw-error": "Missing buy and sell",
      "type-error": "Transaction type is not supported",
      "account-error": "Missing account",
      "merge-count-error": "Transaction count is not supported for merge",
      "transfer-count-error": "Transaction count is not supported for transfer",
      "merge-type-error": "Transaction type is not supported for merge",
      "transfer-type-error": "Transaction type is not supported for transfer",
      "subaccount-error": "Missing subaccount",
    },
  },
  AgGrid: {
    contextMenu: {
      exportToExcel: "Export to Excel",
      add: "Add",
      edit: "Edit",
      remove: "Remove",
      importFromExcel: {
        title: "Import",
        import: "Import from Excel",
        example: "Example file",
      },
      resetFilters: "Reset filters",
      refreshData: "Refresh data",
      fitColumns: "Size columns to fit",
      autoSizeColumns: "Auto size columns",
      openIn: "Open in",
      copyId: "Copy Bloxtax ID",
    },
    default: {
      empty: "No data",
    },
  },
  Components: {
    Upload: {
      error: "Error",
      statuses: {
        pending: "File is valid",
        uploading: "Uploading",
        done: "Done",
        error: "Error",
      },
    },
  },
  InventoryTypes: {
    auto: "Auto",
    shared: "Shared",
    self: "Self",
    group: "Group",
  },
  TransactionTypes: {
    income_lending: "Income - Lending",
    income_dividend: "Income - Dividend",
    income_future: "Capital Gain",
    income_deferred: "Income - Deferred",
    lost_future: "Capital Loss",
    mining: "Mining",
    income: "Income",
    payment: "Payment",
    gift: "Gift/Tip",
    lost: "Lost",
    trade: "Trade",
    swap: "Swap",
    transfer_out: "Transfer Out",
    transfer_in: "Transfer In",
    withdrawal: "Withdrawal",
    deposit: "Deposit",
    staking: "Staking",
    fee: "Fee",
  },
  MapMethods: {
    income_lending: "Income - Lending",
    income_dividend: "Income - Dividend",
    income_future: "Capital Gain",
    income_deferred: "Income - Deferred",
    lost_future: "Capital Loss",
    mining: "Mining",
    income: "Income",
    payment: "Payment",
    gift: "Gift/Tip",
    lost: "Lost",
    trade: "Trade",
    swap: "Swap",
    bridge: "Bridge",
    transfer_out: "Transfer Out",
    transfer_in: "Transfer In",
    withdrawal: "Withdrawal",
    deposit: "Deposit",
    staking: "Staking",
    fee: "Fee",
    loan: "Loan",
    lend: "Lend",
    blackbox: "Blackbox",
    vault: "Vault",
    ico: "ICO",
    poolout: "Pool Out",
    poolin: "Pool In",
    ignored: "Ignored",
    transfer: "Known Transfer",
    utransfer: "Unknown Transfer",
  },
  MapMethodsAddon: {
    loancrypto: "Loan Crypto",
    lendcrypto: "Lend Crypto",
    loanfiat: "Loan Fiat",
    lendfiat: "Lend Fiat",
  },
  SourceKind: {
    exchange: "Exchange",
    wallet: "Wallet",
    blockchain: "Blockchain",
  },
  SourceType: {
    file: "File",
    api: "API",
    manual: "Manual",
  },
  ExchangeRateSources: {
    cc: "CryptoCompare",
    cg: "CoinGeko",
    boi: "Bank of Israel",
    fixer: "Fixer",
    manual: "Administrator",
    file: "File",
    unknown: "Unknown",
  },
  MadadRateSources: {
    cbs: "Central Bureau of Statistics",
    manual: "Administrator",
    unknown: "Unknown",
  },
  General: {
    true: "Yes",
    false: "No",
    search: "Search...",
  },
  TaskStatus: {
    pendingApproval: "Pennding Approval",
    pending: "Pending",
    launch: "Launch",
    running: "Running",
    completed: "Completed",
    failed: "Failed",
    terminated: "Terminated",
  },
  TaskTypes: {
    normalization: "Normalization",
    parser: "Parser",
    api: "API",
    timeline: "Timeline",
    importRates: "Import Exchange Rates",
    report: "Reports",
    transfers: "Transfers",
    journal: "JE Report",
    deletion: "Deletion",
    migration: "Migration",
    insertData: "Insert Data",
    completer: "Completer",
    wallets: "Wallets",
    defi: "DEFI Algorytm",
    stats: "Statistics",
  },
  TaskRunTime: {
    lessThanMinute: "Less than a minute",
    lessThanHour: "Less than an hour",
    lessThanDay: "Less than a day",
    graterThanDay: "Grater than a day",
  },
  TransferTypes: {
    recognized: "Recognized",
    suspicious: "Suspicious",
    verified: "Verified",
    virtual: "Virtual",
    unknown: "Unknown",
    manual: "Manual",
    unrecognized: "Unrecognized",
  },
  TransferContext: {
    approve: "Approve",
    decline: "Decline",
    connect: "Connect",
    disconnect: "Disconnect",
    operations: "Operations",
  },
  AddressTypes: {
    contract: "Smart Contract",
    wallet: "Wallet",
  },
  ReportTypes: {
    input: "Input File",
    export: "Input Old",
    transfers: "Transfers",
    timeline: "Timeline",
    transactions: "Raw Transactions",
    gainloss: "Gain & Loss",
    balance: "Balance",
    balanceExtended: "Balance Extended",
    missings: "Missings",
    fiat: "Fiat",
    f1399: "1399 Form",
    je: "Journal Entries",
    summary: "Summary",
  },
  RequestStatus: {
    pending: "In work",
    payment: "Requires payment",
    rejected: "Need more info",
    completed: "Completed",
    unknown: "Not requested",
  },
  CoaTypes: {
    capital: "Capital",
    businessActivity: "Business Activity",
    gainLoss: "Gain&Loss",
    financeActivity: "Finance Activity",
    assets: "Assets",
    payable: "Payable",
    receivable: "Receivable",
    liabilities: "Liabilities",
  },
  CoaSettings: {
    accounts: "Accounts",
    options: "Options",
  },
  AccountTypes: {
    payable: "Payable account",
    receivable: "Receivable account",
    capital: "Capital account",
    assets: "Asset account",
    liabilities: "Liability account",
  },
  Roles: {
    "super-admin": "System Administrator",
    admin: "Bloxtax Group",
    "org-owner": "Organization Owner",
    "org-partner": "Organization Partner",
    "org-cpa": "Organization CPA",
  },
  Permissions: {
    accounts: "חשבונות",
    transactions: "פעולות",
    balances: "יתרות וחוסרים",
    reports: "דוחות",
    settings: "הגדרות ארגון",
  },
  SubaccountTypes: {
    ico: "ICO account",
    pool: "Pool account",
    vault: "Vault account",
    blackbox: "Blackbox account",
    lendcrypto: "Lend Crypto account",
    loancrypto: "Loan Crypto account",
    lendfiat: "Lend Fiat account",
    loanfiat: "Loan Fiat account",
    openBalance: "Open Balance",
    closeBalance: "Close Balance",
    staking: "Staking account",
    exchange: "Sub-account",
  },
  Errors: {
    default: {
      message: "Something went wrong",
      description: "Please try again later",
    },
  },
  Messages: {
    chooseOne: "Choose one row at least",
  },
  Validations: {
    isRequired: "This field is required",
    compare: "The fields are not equal",
    isPositiveNumber: "The field must be a positive number",
    notZeroNumber: "The field must be a non-zero number",
    isValidText: "השדה חייב להכיל אותיות בלבד",
    isValidEmail: "The field must be a valid email address",
    isValidPhone: "The field must be a valid phone number",
    isEthereumAddress: "The field must be a valid EVM address",
    isValidApiKey: "The field must be a valid {name} API key",
    isWalletExists: "The wallet already exists",
    isApiExists: "The API already exists",
    file: {
      empty: "Pay attention, this file is empty - there is no transactions",
      format: "Invalid file format",
      corrupted: "Corrupted file",
    },
    signup: {
      form_identifier_exists: "{field} זה כבר נמצא במערכת",
      form_password_length_too_short: "הסיסמה שלך חייבת להכיל 8 תווים או יותר",
      form_password_not_strong_enough: "הסיסמה שלך אינה מספיק חזקה",
      form_password_pwned:
        "הסיסמה הזו נמצאה כחלק מהפרטים שנחשפו בהפרת נתונים ולא ניתן להשתמש בה",
      form_code_incorrect: "קוד אימות שלך אינו תקין",
    },
  },
  TimelineTypes: {
    TRADE: "Trade",
    DEPOSIT: "Deposit",
    WITHDRAWAL: "Withdrawal",
    TRANSFER_IN: "Transfer In",
    TRANSFER_OUT: "Transfer Out",
  },
  Support: [
    "Migrate user from the old system",
    "Upload data error",
    "System error",
    "Balances error",
    "Reports questions",
    "System questions",
    "Suggestions for improvement",
  ],
};

export default en;
